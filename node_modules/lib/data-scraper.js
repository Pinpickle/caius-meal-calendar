'use strict';

var cheerio = require('cheerio');
var moment = require('moment-timezone');
var url = require('url');

/**
 * The DataScraper finds particular pieces of data in HTML returned by the Caius Meal
 * Bookings website. It is the developer's responsibility to make sure the correct HTML
 * is in the object using setPageContent before checking.
 *
 * @param {String} pageContent - The initial content to load the scraper with
 * @constructor
 */
var DataScraper = module.exports = function DataScraper(pageContent) {
  this.setPageContent(pageContent);
};

/**
 * Set the page content of the scraper.
 *
 * @param {String} pageContent
 */
DataScraper.prototype.setPageContent = function setPageContent(pageContent) {
  this.$ = cheerio.load(pageContent);
};

/**
 * Get a list of links to meals from the home page of the booking website.
 *
 * @param {String} base - Base URL to resolve urls relative to
 * @return {Array} An array of links to events
 */
DataScraper.prototype.getMealLinks = function getMealLinks(base) {
  var $ = this.$;
  var $mealLinks = $('h1 + table tr a');
  return Array.prototype.map.call($mealLinks, function (elem) {
    return url.resolve(base || '', $(elem).attr('href'));
  });
};

/**
 * Determines if the page is the Raven login page
 *
 * @return {Boolean}
 */
DataScraper.prototype.isLoggingIn = function isLoggingIn() {
  return this.$('title').text().search('Raven') !== -1;
};

/**
 * Determines if the page is the Raven login options page
 *
 * @return {Boolean}
 */
DataScraper.prototype.isLoggingInOptions = function isLoggingInOptions() {
  return this.$('title').text().search('Session options') !== -1;
};

/**
 * Gets data for a meal page.
 *
 * @return {Object} An object with data about the meal. Null if a date can't be found
 */
DataScraper.prototype.getMealInfo = function getMealData() {
  var $ = this.$;
  var $mealElements = $('h1 ~ table').first().find('tr');

  var info = {
    raw: {
      title: $('h1').text()
    }
  };

  $mealElements.each(function () {
    var $title = $(this).find('td').first();
    var $data = $title.next();

    if ($title.text().search('Date') != -1) {
      info.raw.date = $data.text();
      return;
    }

    if ($title.text().search('Start time') != -1) {
      info.raw.startTime = $data.text();
      return;
    }
  });

  info.title = info.raw.title;
  var dateString = (info.raw.date + ' ' + info.raw.startTime).replace(/\s+/g, ' ');

  info.date = moment.tz(dateString, 'dddd-D-MMMM-YYYY-H:mma', 'Europe/London');
  info.date.tz('GMT');

  if (!info.date.isValid()) {
    // If there's no date we can infer, there's no point continuing
    return null;
  }

  return info;
};
