var Zombie = require('zombie');
var cheerio = require('cheerio');
var DataScraper = require('lib/data-scraper');

var UserMocker = module.exports = function UserMocker() {
  var self = this;

  this.browser = new Zombie();
  this.scraper = new DataScraper('');

  this.browser.on('loaded', function (document) {
    self.scraper.setPageContent(document.documentElement.innerHTML);
  });

  this.loggedIn = false;
};

UserMocker.prototype.loginFromCredentials = function loginFromCredentials(username, password) {
  var self = this;
  return this.browser.visit(UserMocker.BOOKING_URL)
    .then(function () {
      if (self.scraper.isLoggingIn()) {
        // We're logging in
        return self.browser
          .fill('userid', username)
          .fill('pwd', password)
          .check('override', 1)
          .pressButton('Login');
      }
    })
    .then(function () {
      if (!self.scraper.isLoggingInOptions()) {
        throw new Error('Credentials incorrect');
      }

      var document = self.browser.tabs.current.document;
      // HACK: Override login time
      var life = document.querySelector('#life');
      life.querySelector(':first-child').value = 1000 * 60 * 24 * 365; // 1 Year
      life.selectedIndex = 0;

      return self.browser.pressButton('Login');
    })
    .then(function () {

      self._loginCheck();
    });
};

UserMocker.prototype.loginFromCookies = function loginFromCookies(cookies) {
  var self = this;

  for (var cookie of cookies) {
    this.browser.setCookie(cookie);
  }

  this.getCookies();

  return this.browser.visit(UserMocker.BOOKING_URL)
    .then(function () {
      self._loginCheck();
    });
}

UserMocker.prototype._loginCheck = function loginCheck() {
  if (this.scraper.isLoggingIn()) {
    throw new Error('Credentials incorrect');
  }

  this.loggedIn = true;
}

UserMocker.prototype.getCookies = function getCookies() {
  return this.browser.cookies.map(function (cookie) {
    cookie.name = cookie.key;
    return cookie;
  });
};

UserMocker.prototype.getMealsInfo = function (cb) {
  var self = this;
  var prom = new Promise(function(resolve, reject) {
    resolve();
  });
  var infos = [];

  // Build promise for sequential execution of visits
  this.scraper.getMealLinks(self.browser.tabs.current.location.href).forEach(function (link) {
    prom = prom.then(function () {
      console.log(link);
      return self.browser.visit(link)
        .then(function () {
          var info = self.scraper.getMealInfo();
          if (info) {
            infos.push(info);
          }
        });
    });
  });

  return prom.then(function () {
    return infos;
  });
};

UserMocker.BOOKING_URL = 'https://www.mealbookings.cai.cam.ac.uk/';
